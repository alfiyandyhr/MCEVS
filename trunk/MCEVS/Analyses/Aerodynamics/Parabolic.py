import numpy as np
import openmdao.api as om

class WingedCruiseDrag(om.ExplicitComponent):
	"""
	Computes the drag of a winged configuration in cruise.
	Parameters:
		rho_air				: air density [kg/m**3]
	Inputs:
		Aero|Cd0			: minimum Cd of the polar drag (coefficient of parasitic drag)
		Aero|Lift			: aerodynamic lift [N]
		eVTOL|S_wing 		: wing area [m**2]
		eVTOL|AR_wing		: wing aspect ratio
		eVTOL|Cruise_speed 	: cruising speed of the eVTOL [m/s]
	Outputs:
		Aero|Drag 			: aerodynamic drag [N]
		Aero|CL_cruise 		: aerodynamic coefficient of lift at cruise
	Notes:
		> Based on a simple parabolic drag polar equations
		> Oswald efficiency is in the function of wing aspect ratio (typically ~0.8)
		> The wing should be un-swept.
	Source:
		Raymer, D. P. Aircraft Design: A Conceptual Approach. Reston, Virginia: American Institute of Aeronautics and Astronautics, Inc., 2006.
	"""
	def initialize(self):
		self.options.declare('rho_air', default=1.225, desc='Air density')

	def setup(self):
		self.add_input('Aero|Cd0', desc='Minimum Cd of the polar drag')
		self.add_input('Aero|Lift', units='N', desc='Lift generated by the wing')
		self.add_input('eVTOL|Cruise_speed', units='m/s', desc='Cruise speed')
		self.add_input('eVTOL|S_wing', units='m**2', desc='Wing reference area')
		self.add_input('eVTOL|AR_wing', desc='Wing aspect ratio')
		self.add_output('Aero|Drag', units='N', desc='Drag of a winged configuration')
		self.add_output('Aero|CL_cruise', desc='Lift coefficient')
		self.declare_partials('*', '*')

	def compute(self, inputs, outputs):
		rho_air = self.options['rho_air']
		CD0 = inputs['Aero|Cd0']
		L = inputs['Aero|Lift']
		v = inputs['eVTOL|Cruise_speed']
		S_wing = inputs['eVTOL|S_wing']
		AR_wing = inputs['eVTOL|AR_wing']

		# Raymer's formula for non-swept wing (Oswald efficiency)
		wing_e = 1.78 * (1 - 0.045 * AR_wing**0.68) - 0.64

		q = 0.5 * rho_air * v**2 	 					# dynamic pressure
		CL = L/(q * S_wing)								# lift coefficient
		CD = CD0 + CL**2 / (np.pi * wing_e * AR_wing)	# drag coefficient
		outputs['Aero|Drag'] = q * S_wing * CD			# drag
		outputs['Aero|CL_cruise'] = CL

	def compute_partials(self, inputs, partials):
		rho_air = self.options['rho_air']
		CD0 = inputs['Aero|Cd0']
		L = inputs['Aero|Lift']
		v = inputs['eVTOL|Cruise_speed']
		S_wing = inputs['eVTOL|S_wing']
		AR_wing = inputs['eVTOL|AR_wing']

		# Raymer's formula for non-swept wing (Oswald efficiency)
		wing_e = 1.78 * (1 - 0.045 * AR_wing**0.68) - 0.64

		q = 0.5 * rho_air * v**2 	 					# dynamic pressure
		CL = L/(q * S_wing)								# lift coefficient
		dq_dv = rho_air * v
		dCL_dL = 1/(q * S_wing)
		dCL_dq = -L/(S_wing * q**2)
		dCL_dS = -L/(q * S_wing**2)
		
		CD = CD0 + CL**2 / (np.pi * wing_e * AR_wing)	# drag coefficient
		dCD_dCD0 = 1
		dCD_dCL = 2*CL / (np.pi * wing_e * AR_wing)
		dD_dq = S_wing * CD
		dD_dS = q * CD
		dD_dCD = q * S_wing
		de_dAR = - 1.78 * 0.045 * 0.68 * AR_wing**(-0.32)

		partials['Aero|Drag', 'Aero|Cd0'] = q * S_wing * dCD_dCD0
		partials['Aero|Drag', 'Aero|Lift'] = dD_dCD * dCD_dCL * dCL_dL
		partials['Aero|Drag', 'eVTOL|S_wing'] = dD_dS + dD_dCD * dCD_dCL * dCL_dS
		partials['Aero|Drag', 'eVTOL|AR_wing'] = q * S_wing * CL**2 / np.pi * -(wing_e * AR_wing)**(-2) * (de_dAR * AR_wing + wing_e) 
		partials['Aero|Drag', 'eVTOL|Cruise_speed'] = (dD_dCD*dCD_dCL*dCL_dq + dD_dq) * dq_dv
		partials['Aero|CL_cruise', 'Aero|Cd0'] = 0
		partials['Aero|CL_cruise', 'Aero|Lift'] = dCL_dL
		partials['Aero|CL_cruise', 'eVTOL|S_wing'] = dCL_dS
		partials['Aero|CL_cruise', 'eVTOL|AR_wing'] = 0
		partials['Aero|CL_cruise', 'eVTOL|Cruise_speed'] = dCL_dq * dq_dv




