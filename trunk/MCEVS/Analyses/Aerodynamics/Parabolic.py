import numpy as np
import openmdao.api as om

class WingedAeroDrag(om.ExplicitComponent):
	"""
	Computes the drag of a winged configuration in flight (cruise, climb, descent).
	Parameters:
		rho_air					: air density [kg/m**3]
	Inputs:
		Aero|Cd0				: minimum Cd of the polar drag (coefficient of parasitic drag)
		Aero|lift				: aerodynamic lift [N]
		Wing|area 				: wing area [m**2]
		Wing|aspect_ratio		: wing aspect ratio
		Aero|speed 				: air speed of the eVTOL [m/s]
	Outputs:
		Aero|total_drag 		: aerodynamic drag [N]
		Aero|CL 				: aerodynamic coefficient of lift
	Notes:
		> Based on a simple parabolic drag polar equations
		> Oswald efficiency is in the function of wing aspect ratio (typically ~0.8)
		> The wing should be un-swept.
	Source:
		Raymer, D. P. Aircraft Design: A Conceptual Approach. Reston, Virginia: American Institute of Aeronautics and Astronautics, Inc., 2006.
	"""
	def initialize(self):
		self.options.declare('rho_air', default=1.225, desc='Air density')

	def setup(self):
		self.add_input('Aero|Cd0', desc='Minimum Cd of the polar drag')
		self.add_input('Aero|lift', units='N', desc='Lift generated by the wing')
		self.add_input('Aero|speed', units='m/s', desc='Air speed')
		self.add_input('Wing|area', units='m**2', desc='Wing reference area')
		self.add_input('Wing|aspect_ratio', desc='Wing aspect ratio')
		self.add_output('Aero|total_drag', units='N', desc='Drag of a winged configuration')
		self.add_output('Aero|CL', desc='Lift coefficient')
		self.declare_partials('*', '*')

	def compute(self, inputs, outputs):
		rho_air = self.options['rho_air']
		CD0 = inputs['Aero|Cd0']
		L = inputs['Aero|lift']
		v = inputs['Aero|speed']
		S_wing = inputs['Wing|area']
		AR_wing = inputs['Wing|aspect_ratio']

		# Raymer's formula for non-swept wing (Oswald efficiency)
		wing_e = 1.78 * (1 - 0.045 * AR_wing**0.68) - 0.64

		q = 0.5 * rho_air * v**2 	 					# dynamic pressure
		CL = L/(q * S_wing)								# lift coefficient
		CD = CD0 + CL**2 / (np.pi * wing_e * AR_wing)	# drag coefficient
		
		outputs['Aero|total_drag'] = q * S_wing * CD			# drag
		outputs['Aero|CL'] = CL

	def compute_partials(self, inputs, partials):
		rho_air = self.options['rho_air']
		CD0 = inputs['Aero|Cd0']
		L = inputs['Aero|lift']
		v = inputs['Aero|speed']
		S_wing = inputs['Wing|area']
		AR_wing = inputs['Wing|aspect_ratio']

		# Raymer's formula for non-swept wing (Oswald efficiency)
		wing_e = 1.78 * (1 - 0.045 * AR_wing**0.68) - 0.64

		q = 0.5 * rho_air * v**2 	 					# dynamic pressure
		CL = L/(q * S_wing)								# lift coefficient
		dq_dv = rho_air * v
		dCL_dL = 1/(q * S_wing)
		dCL_dq = -L/(S_wing * q**2)
		dCL_dS = -L/(q * S_wing**2)
		
		CD = CD0 + CL**2 / (np.pi * wing_e * AR_wing)	# drag coefficient
		dCD_dCD0 = 1
		dCD_dCL = 2*CL / (np.pi * wing_e * AR_wing)
		dD_dq = S_wing * CD
		dD_dS = q * CD
		dD_dCD = q * S_wing
		de_dAR = - 1.78 * 0.045 * 0.68 * AR_wing**(-0.32)

		partials['Aero|total_drag', 'Aero|Cd0'] = q * S_wing * dCD_dCD0
		partials['Aero|total_drag', 'Aero|lift'] = dD_dCD * dCD_dCL * dCL_dL
		partials['Aero|total_drag', 'Wing|area'] = dD_dS + dD_dCD * dCD_dCL * dCL_dS
		partials['Aero|total_drag', 'Wing|aspect_ratio'] = q * S_wing * CL**2 / np.pi * -(wing_e * AR_wing)**(-2) * (de_dAR * AR_wing + wing_e) 
		partials['Aero|total_drag', 'Aero|speed'] = (dD_dCD*dCD_dCL*dCL_dq + dD_dq) * dq_dv
		partials['Aero|CL', 'Aero|Cd0'] = 0
		partials['Aero|CL', 'Aero|lift'] = dCL_dL
		partials['Aero|CL', 'Wing|area'] = dCL_dS
		partials['Aero|CL', 'Wing|aspect_ratio'] = 0
		partials['Aero|CL', 'Aero|speed'] = dCL_dq * dq_dv




